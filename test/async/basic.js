// Generated by CoffeeScript 1.3.1
(function() {
  var Phantom, assert, bat, child, describe, mode, psTree, t, vows, _i, _len, _ref,
    __slice = [].slice;

  vows = require('vows');

  assert = require('assert');

  psTree = require('ps-tree');

  child = require('child_process');

  Phantom = require('../../lib/phantom-sync').Phantom;

  bat = function(options) {
    var phantom;
    phantom = new Phantom(options);
    return {
      "Can create an instance": {
        topic: t(function() {
          var _this = this;
          return phantom.create(function(p) {
            return _this.callback(null, p);
          });
        }),
        "which is an object": function(p) {
          return assert.isObject(p);
        },
        "with a version": {
          topic: t(function(p) {
            var _this = this;
            return p.get('version', function(val) {
              return _this.callback(null, val);
            });
          }),
          "defined": function(ver) {
            return assert.notEqual(ver, void 0);
          },
          "greater than or equal to 1.3": function(ver) {
            assert.ok(ver.major >= 1, "major version too low");
            return assert.ok(ver.minor >= 3, "minor version too low");
          }
        },
        "which can inject Javascript from a file": {
          topic: t(function(p) {
            var _this = this;
            return p.injectJs('test/inject.js', function(success) {
              return _this.callback(null, success);
            });
          }),
          "and succeed": function(success) {
            return assert.ok(success, "Injection should return true");
          }
        },
        "which can create a page": {
          topic: t(function(p) {
            var _this = this;
            return p.createPage(function(page) {
              return _this.callback(null, page);
            });
          }),
          "which is an object": function(page) {
            return assert.isObject(page);
          }
        },
        "which, when you call exit()": {
          topic: t(function(p) {
            var test;
            test = this;
            return setTimeout(function() {
              p.exit();
              return setTimeout(function() {
                return psTree(process.pid, test.callback);
              }, 500);
            }, 500);
          }),
          "exits after 500ms": function(children) {
            return assert.equal(children.length, 1, "process still has " + children.length + " child(ren): " + (JSON.stringify(children)));
          }
        },
        teardown: function(p) {
          return p.exit();
        }
      }
    };
  };

  describe = function(name, options) {
    return vows.describe(name).addBatch(bat(options))["export"](module);
  };

  t = function(fn) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      fn.apply(this, args);
    };
  };

  _ref = ['async', ['mixed', 'args'], ['mixed', 'fibers']];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    mode = _ref[_i];
    describe("The phantom module (" + mode + ")", {
      mode: mode
    });
  }

}).call(this);
