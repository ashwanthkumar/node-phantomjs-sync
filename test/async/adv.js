// Generated by CoffeeScript 1.3.1
(function() {
  var Phantom, assert, bat, describe, express, mode, t, vows, _i, _len, _ref,
    __slice = [].slice;

  vows = require('vows');

  assert = require('assert');

  express = require('express');

  Phantom = require('../../lib/phantom-sync').Phantom;

  describe = function(name, options) {
    return vows.describe(name).addBatch(bat(options))["export"](module);
  };

  t = function(fn) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      fn.apply(this, args);
    };
  };

  bat = function(options) {
    var app, phantom;
    app = express.createServer();
    app.use(express["static"](__dirname));
    app.get('/', function(req, res) {
      return res.send("<html>\n  <head>\n    <title>Test page title</title>\n  </head>\n  <body>\n    <img src=\"/test.gif\" />\n  </body>\n</html>");
    });
    app.listen();
    phantom = new Phantom(options);
    return {
      "Can create an instance with --load-images=no": {
        topic: t(function() {
          var _this = this;
          return phantom.create('--load-images=no', function(p) {
            return _this.callback(null, p);
          });
        }),
        "which, when you open a page": {
          topic: t(function(p) {
            var test;
            test = this;
            return p.createPage(function(page) {
              var _this = this;
              return page.open("http://127.0.0.1:" + (app.address().port) + "/", function(status) {
                return setTimeout(function() {
                  return test.callback(null, page, status);
                }, 1500);
              });
            });
          }),
          "and check the settings object": {
            topic: t(function(page) {
              var _this = this;
              return page.get('settings', function(s) {
                return _this.callback(null, s);
              });
            }),
            "loadImages isn't set": function(s) {
              return assert.strictEqual(s.loadImages, false);
            }
          },
          "succeeds": function(_1, _2, status) {
            return assert.equal(status, 'success');
          },
          "and check a test image": {
            topic: t(function(page) {
              var _this = this;
              return page.evaluate((function() {
                return document.getElementsByTagName('img')[0];
              }), function(img) {
                return _this.callback(null, img);
              });
            }),
            "it doesn't load": function(img) {
              assert.strictEqual(img.width, 0, "width should be 0");
              return assert.strictEqual(img.height, 0, "height should be 0");
            }
          }
        },
        teardown: function(p) {
          app.close();
          return p.exit();
        }
      }
    };
  };

  _ref = ['async', ['mixed', 'args'], ['mixed', 'fibers']];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    mode = _ref[_i];
    describe("Adv (" + mode + ")", {
      mode: mode
    });
  }

}).call(this);
