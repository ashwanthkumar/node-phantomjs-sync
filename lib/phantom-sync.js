// Generated by CoffeeScript 1.3.1
(function() {
  var MakeSync, Phantom, Sync, buildObjectOptions, createReplacement, phantom, _ref,
    __slice = [].slice;

  _ref = require('make-sync'), Sync = _ref.Sync, MakeSync = _ref.MakeSync;

  phantom = require('phantom');

  buildObjectOptions = function(options) {
    return {
      ph: {
        mode: options.mode,
        exclude: [/^_/, 'exit'],
        error_type: 'none',
        num_of_args: {
          set: 2
        }
      },
      page: {
        mode: options.mode,
        exclude: [/^_/, 'sendEvent'],
        error_type: 'none',
        num_of_args: {
          evaluate: 1,
          set: 2
        }
      }
    };
  };

  createReplacement = function(options) {
    var objectOptions;
    objectOptions = buildObjectOptions(options);
    return MakeSync(function() {
      var args, done, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), done = arguments[_i++];
      return phantom.create.apply(phantom, __slice.call(args).concat([function(ph) {
        var _createPage;
        _createPage = ph.createPage;
        ph.createPage = function() {
          var args, done, _j;
          args = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), done = arguments[_j++];
          return _createPage.apply(null, __slice.call(args).concat([function(page) {
            MakeSync(page, objectOptions.page);
            return done(page);
          }]));
        };
        MakeSync(ph, objectOptions.ph);
        return done(ph);
      }]));
    }, {
      mode: options.mode,
      error_type: 'none'
    });
  };

  Phantom = (function() {

    Phantom.name = 'Phantom';

    function Phantom(options) {
      if (options == null) {
        options = {
          mode: 'sync'
        };
      }
      this.create = createReplacement(options);
    }

    return Phantom;

  })();

  exports.Phantom = Phantom;

  exports.Sync = Sync;

}).call(this);
