// Generated by CoffeeScript 1.3.1
(function() {
  var MakeSync, Phantom, Sync, exec, should, test, _ref;

  should = require('should');

  exec = require('child_process').exec;

  MakeSync = require('make-sync').MakeSync;

  _ref = require('../../lib/phantom-sync'), Phantom = _ref.Phantom, Sync = _ref.Sync;

  test = function(options) {
    var p, phantom, ver, _ref1;
    _ref1 = {}, phantom = _ref1.phantom, p = _ref1.p, ver = _ref1.ver;
    before(function(done) {
      phantom = new Phantom(options);
      return done();
    });
    after(function(done) {
      if (p != null) {
        p.exit();
      }
      return done();
    });
    describe("create an instance", function() {
      it("should work", function(done) {
        return Sync(function() {
          p = phantom.create();
          p.should.be.a('object');
          return done();
        });
      });
      it("version defined,", function(done) {
        return Sync(function() {
          ver = p.get('version');
          should.exist(ver);
          return done();
        });
      });
      return it("version greater than or equal to 1.3", function(done) {
        (ver.major >= 1).should.be["true"];
        (ver.minor >= 3).should.be["true"];
        return done();
      });
    });
    describe("inject Javascript from a file", function() {
      return it("should work", function(done) {
        return Sync(function() {
          var success;
          success = p.injectJs('test/inject.js');
          success.should.be.ok;
          return done();
        });
      });
    });
    describe("can create a page", function() {
      return it("should work", function(done) {
        return Sync(function() {
          var page;
          page = p.createPage();
          page.should.be.a('object');
          return done();
        });
      });
    });
    return describe("call exit()", function() {
      var hasChildProcess;
      hasChildProcess = MakeSync(function(ppid, done) {
        return exec('ps -Ao ppid,pid', function(err, stdout, stderr) {
          var count, line;
          count = ((function() {
            var _i, _len, _ref2, _results;
            _ref2 = stdout.split('\n');
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              line = _ref2[_i];
              if (line.trim().match(RegExp("^" + ppid + "\\s+\\d+"))) {
                _results.push('');
              }
            }
            return _results;
          })()).length;
          return done(null, count > 1);
        });
      });
      return it("should work", function(done) {
        return Sync(function() {
          (hasChildProcess(process.pid)).should.be["true"];
          p.exit();
          return setTimeout(function() {
            return Sync(function() {
              (hasChildProcess(process.pid)).should.be["false"];
              return done();
            });
          }, 500);
        });
      });
    });
  };

  describe("phantom-sync", function() {
    return describe("sync", function() {
      return describe("basics", function() {
        var mode, _i, _len, _ref1, _results;
        _ref1 = ['sync'];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          mode = _ref1[_i];
          _results.push(describe("" + mode + " mode", function() {
            return test({
              mode: mode
            });
          }));
        }
        return _results;
      });
    });
  });

}).call(this);
